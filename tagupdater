#!/usr/bin/env bash

# List all semver tags and sort them; exclude pre-release tags
gettags() {
	git tag --list --sort='version:refname' '*.*.*' \
		| grep --extended-regexp '^([[:digit:]]+\.){2}[[:digit:]]+$'
}

# Get latest semver tag
getlatesttag() {
	gettags | tail --lines=1
}

# Get SHA of object ref points to
getparentsha() {
	local ref=$1
	git rev-parse --verify "$ref^{}"
}

# Create an annotated tag
createannotatedtag() {
	local tag=$1
	local semvertag=$2

	# Find SHA of object tag points to
	local sha
	sha=$(getparentsha "$semvertag")

	# Create tag object
	echo "Creating tag object for $tag..."
	local tagsha
	tagsha=$(gh api 'repos/{owner}/{repo}/git/tags' \
		--raw-field "tag=$tag" \
		--raw-field "message=latest release in $tag" \
		--raw-field "object=$sha" \
		--raw-field "type=commit" \
		--jq '.sha')

	# Create tag reference
	echo "Creating tag reference..."
	gh api 'repos/{owner}/{repo}/git/refs' \
		--raw-field "ref=refs/tags/$tag" \
		--raw-field "sha=$tagsha" \
		| jq .
}

main() {
	# Parse options
	local opt updatelatest updateminor
	while getopts 'lm' opt; do
		case $opt in
			l) updatelatest='true' ;;
			m) updateminor='true' ;;
			'?') exit 1 ;;
		esac
	done

	# Set git name and email
	git config --global user.name "github-actions"
	git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

	# Clobber local tags
	git fetch --tags --force

	# Build associative array of most recent major and minor releases
	local -A latest

	echo "Building tag table..."
	local major minor patch
	while IFS=. read -r major minor patch; do
		latest["$major"]="$major.$minor.$patch"
		[[ $updateminor == 'true' ]] && latest["$major.$minor"]="$major.$minor.$patch"
	done < <(gettags)

	# Add "latest" tag if there are tags and the option is set
	if ((${#latest[@]})) && [[ $updatelatest == 'true' ]]; then
		latest['latest']=$(getlatesttag)
	fi

	# Move or create tags
	local tag semvertag
	for tag in "${!latest[@]}"; do
		echo "Checking $tag..."
		semvertag=${latest["$tag"]}
		if git show-ref --tags --quiet "$tag"; then
			if [[ $(getparentsha "$tag") == "$(getparentsha "$semvertag")" ]]; then
				echo "$tag already points to same commit as $semvertag, skipping..."
				continue
			fi
			# Delete local and remote tag
			echo "Deleting $tag..."
			git tag --delete "$tag"
			git push --delete origin "$tag"
		fi
		echo "Creating annotated tag $tag pointing to same commit as $semvertag..."
		createannotatedtag "$tag" "$semvertag"
	done
}

[[ ${BASH_SOURCE[0]} == "$0" ]] && main "$@"
